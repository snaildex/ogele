#version 430

layout( local_size_x = 1 ) in;

struct Triangle {
	vec4 Position[3];
	vec4 Normal[3];
	vec4 TriNormal;
	vec4 NormDot;
};

layout(std430, binding = 0) buffer PosBuffer { vec4 Pos[]; };
layout(std430, binding = 1) buffer NormBuffer { vec4 Norm[]; };
layout(std430, binding = 2) buffer IndexBuffer { uvec4 Index[]; };
layout(std430, binding = 3) buffer TrisBuffer { Triangle Tris[]; };

uint GetIndex(uint i) { return Index[i/4][i%4]; }

void main()
{
	uint idx = gl_GlobalInvocationID.x;
	Triangle tri;
	for(int i=0; i<3; ++i) {
		tri.Position[i] = Pos[GetIndex(idx * 3 + i)];
		tri.Normal[i] = normalize(Norm[GetIndex(idx * 3 + i)]);
	}
	tri.TriNormal.xyz = normalize(cross(tri.Position[1].xyz-tri.Position[0].xyz,tri.Position[2].xyz-tri.Position[0].xyz));
	tri.NormDot.xyz = vec3(dot(tri.TriNormal.xyz,tri.Normal[0].xyz), dot(tri.TriNormal.xyz,tri.Normal[1].xyz), dot(tri.TriNormal.xyz,tri.Normal[2].xyz));
	Tris[idx] = tri;
}